name: CI/CD Pipeline

on:
  push:
    branches:
      - main
    paths:
      - 'apps/client/**'
      - 'apps/server/**'
  pull_request:
    branches:
      - main
    paths:
      - 'apps/client/**'
      - 'apps/server/**'

jobs:
  sonarqube:
    name: Run SonarQube Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Run SonarQube analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          npx sonar-scanner \
            -Dsonar.projectKey=my-project \
            -Dsonar.organization=my-org \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.exclusions=**/CONTRIBUTING.md,**/*.md \
            -Dsonar.sources=./ \
            -Dsonar.tests=./

  deploy-frontend:
    name: Deploy Frontend to Netlify
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && contains(github.event.head_commit.message, 'apps/client/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: cd apps/client && npm install

      # - name: Run Tests
      #   run: cd apps/client && npm test

      - name: Build Project
        run: cd apps/client && npm run build

      - name: Deploy to Netlify
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        run: cd apps/client && npx netlify deploy --prod --dir=./.next

  deploy-backend:
    name: Deploy Backend to Render
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && contains(github.event.head_commit.message, 'apps/server/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: cd apps/server && npm install

      # - name: Run Tests
      #   run: cd apps/server && npm test

      - name: Build Project
        run: cd apps/server && npm run build

      - name: Deploy to Render
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
        run: |
          curl -X POST "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys" \
          -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
          -H "Accept: application/json" \
          -H "Content-Type: application/json" \
          -d '{"clearCache": false}'
