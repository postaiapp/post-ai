name: CI/CD Pipeline

on:
  push:
    branches:
      - main
    paths:
      - 'apps/client/**'
      - 'apps/server/**'
  pull_request:
    branches:
      - main
    paths:
      - 'apps/client/**'
      - 'apps/server/**'

jobs:
  sonarqube:
    name: Run SonarQube Analysis
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Run SonarQube analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          npx sonar-scanner \
            -Dsonar.projectKey=postaiapp_post-ai \
            -Dsonar.organization=postaiapp \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.sources=. \
            -Dsonar.exclusions=**/node_modules/**,**/build/**,**/dist/**,**/coverage/**,**/*.md,**/tsconfig.json \
            -Dsonar.test.exclusions=**/*.spec.ts,**/*.test.ts,**/__tests__/**,**/tsconfig.json \
            -Dsonar.sourceEncoding=UTF-8

  e2e-tests:
    name: Run E2E Tests
    runs-on: ubuntu-latest
    needs: sonarqube
    continue-on-error: true
    services:
      mongodb:
        image: mongo:latest
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 5s
          --health-timeout 30s
          --health-retries 3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: cd apps/server && npm install

      - name: Run E2E Tests
        working-directory: apps/server
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://localhost:27017/test
          OPENAI_API_KEY: dummy-openai-key
          JWT_SECRET: dummy-jwt
          AWS_BUCKET_NAME: dummy-bucket
          AWS_ACCESS_KEY_ID: dummy-access-key
          AWS_SECRET_ACCESS_KEY: dummy-secret-key
          CLOUDFLARE_ACCOUNT_ID: dummy-cloudflare
          IDEOGRAM_API_KEY: dummy-ideogram
          IDEOGRAM_BASE_URL: https://api.ideogram.ai
          EMAIL_USER: dummy@domain.com
          EMAIL_HOST: smtp.dummy.com
          EMAIL_PASS: dummy-email-pass
          EMAIL_PORT: "587"
          EMAIL_SECURE: "false"
        run: npm run test:e2e

  deploy-frontend:
    name: Deploy Frontend to Netlify
    runs-on: ubuntu-latest
    needs: e2e-tests
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: cd apps/client && npm install

      - name: Build Project
        run: cd apps/client && npm run build

      - name: Deploy to Netlify
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        run: cd apps/client && npx netlify deploy --prod --dir=./.next

  deploy-backend:
    name: Deploy Backend to Render
    runs-on: ubuntu-latest
    needs: e2e-tests
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: cd apps/server && npm install

      - name: Build Project
        run: cd apps/server && npm run build

      - name: Deploy to Render
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
        run: |
          curl -X POST "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys" \
          -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
          -H "Accept: application/json" \
          -H "Content-Type: application/json" \
          -d '{"clearCache": false}'
